
let statements = {
    getAllPhaseTasks: {
            statement :`
            SELECT PHASE_TASK_ID,
                   START_DATE,
                   END_DATE,
                   DESCRIPTION,
                   CREATED_BY,
                   CREATED_DATE,
                   STATUS,
                   DURATION,
                   EMPLOYEE_ID,
                   RISK_DATE,
                   TRACK_PHASE_ID,
                   INCOMING_STATUS,
                   TASK_CODE,
                   PARENT_TASK_ID,
                   PROJECT_ID,
                   MILESTONE_ID,
                   PERCENTAGE_COMPLETE,
                   TASK_TYPE,
                   ASSIGN_DATE,
                   ASSIGN_BY,
                   TASK_CLASSIFICATION_ID,
                   TASK_CATEGORY_ID,
                   DELETED,
                   DELETED_BY,
                   DELETED_DATE,
                   SUBSIDIARY_ID,
                   WO_PARENT,
                   WO_TEMP_DTL,
                   WO_TEMP_PARENTPHASE,
                   INCIDENT_REPORT_REQUEST_SENT,
                   TIME_UNIT,
                   MEASURE_VALUE,
                   MEASURE_UNIT,
                   ACTUAL_MEASURE_VALUE,
                   BOQ_ID
              FROM PHASE_TASKS `,
            returns: [],
            bindings: [],
            qstring: "",
            requireCommit: false
    },
  
    getOnePhaseTasksByID:{
        statement:`SELECT PHASE_TASK_ID,
        START_DATE,
        END_DATE,
        DESCRIPTION,
        CREATED_BY,
        CREATED_DATE,
        STATUS,
        DURATION,
        EMPLOYEE_ID,
        RISK_DATE,
        TRACK_PHASE_ID,
        INCOMING_STATUS,
        TASK_CODE,
        PARENT_TASK_ID,
        PROJECT_ID,
        MILESTONE_ID,
        PERCENTAGE_COMPLETE,
        TASK_TYPE,
        ASSIGN_DATE,
        ASSIGN_BY,
        TASK_CLASSIFICATION_ID,
        TASK_CATEGORY_ID,
        DELETED,
        DELETED_BY,
        DELETED_DATE,
        SUBSIDIARY_ID,
        WO_PARENT,
        WO_TEMP_DTL,
        WO_TEMP_PARENTPHASE,
        INCIDENT_REPORT_REQUEST_SENT,
        TIME_UNIT,
        MEASURE_VALUE,
        MEASURE_UNIT,
        ACTUAL_MEASURE_VALUE,
        BOQ_ID
   FROM PHASE_TASKS
   WHERE  PHASE_TASK_ID = :PHASE_TASK_ID `,
        returns: [],
        bindings: [],
        qstring: "",
        requireCommit: false
    },


    getPhaseTasksByProjectId:{
      statement:`SELECT PHASE_TASK_ID,
      START_DATE,
      END_DATE,
      DESCRIPTION,
      CREATED_BY,
      CREATED_DATE,
      STATUS,
      DURATION,
      EMPLOYEE_ID,
      RISK_DATE,
      TRACK_PHASE_ID,
      INCOMING_STATUS,
      TASK_CODE,
      PARENT_TASK_ID,
      PROJECT_ID,
      MILESTONE_ID,
      PERCENTAGE_COMPLETE,
      TASK_TYPE,
      ASSIGN_DATE,
      ASSIGN_BY,
      TASK_CLASSIFICATION_ID,
      TASK_CATEGORY_ID,
      DELETED,
      DELETED_BY,
      DELETED_DATE,
      SUBSIDIARY_ID,
      WO_PARENT,
      WO_TEMP_DTL,
      WO_TEMP_PARENTPHASE,
      INCIDENT_REPORT_REQUEST_SENT,
      TIME_UNIT,
      MEASURE_VALUE,
      MEASURE_UNIT,
      ACTUAL_MEASURE_VALUE,
      BOQ_ID
 FROM PHASE_TASKS
 WHERE  PROJECT_ID = :PROJECT_ID `,
      returns: [],
      bindings: [],
      qstring: "",
      requireCommit: false
  }
  }
  
  module.exports = statements ;
  