
let statements = {
    getMeetings: {
            statement :`select 
            distinct MT.MEETING_ID,MT.MEETING_DESCRIPTION,MT.MEETING_DATE,           
            MT.START_TIME_STR,MT.END_TIME_STR,MT.STATUS,           
            MT.LOCATION,MT.PROJECT_ID,PJ.PRIMARY_NAME,PJ.SECONDARY_NAME,MT.CREATED_BY, MT.COMMITTEE_ID  ,
            (select EMPLOYEE_ID  from HR.MEETING_MEMBERS MMM where  MEMBER_ROLE = 205  and MMM.MEETING_ID = MT.MEETING_ID and rownum = 1 ) MEETING_OWNER_ID       
            from HR.MEETINGS mt,HR.MEETING_MEMBERS mm,HR.PROJECTS pj           
            where MT.MEETING_ID=MM.MEETING_ID and PJ.PROJECT_ID(+)=MT.PROJECT_ID          
            and nvl(PJ.DELETED,0)=0 and nvl(MM.DELETED,0)=0 and nvl(MT.DELETED,0)=0 and MT.STATUS=1        
            and ((to_char(to_date (MT.MEETING_DATE || ' '|| MT.START_TIME_STR, 'dd/mm/yy hh24:mi'),'YYYY-MM-DD HH24:MI')            
            >= to_char(systimestamp,'YYYY-MM-DD HH24:MI')) or MT.CREATED_BY= :CREATED_BY)          
            and MM.EMPLOYEE_ID = :EMPLOYEE_ID  order by MT.MEETING_ID
              `,
            returns: [],
            bindings: [],
            qstring: "",
            requireCommit: false
    },
    
    activeMeetingsByEmpId: {
      statement :`SELECT
      MM.MEETING_ID           ,
      MM.MEETING_CODE         ,
      MM.MEETING_DESCRIPTION  ,
      MM.MEETING_DATE         ,
      MM.START_TIME           ,
      MM.END_TIME             ,
      MM.LOCATION             ,
      MM.PROJECT_ID           ,
      MM.STATUS               ,
      MM.START_TIME_STR       ,
      MM.END_TIME_STR         ,
      MM.TYPE                 ,
      MM.COMMITTEE_ID         ,
      MM.DELETED              ,
      MM.DELETED_BY           ,
      MM.DELETED_DATE         ,
      MM.MEETING_HELD_FLAG    ,
      MM.SEND_MOM_FLAG        ,
      MM.SAVE_DELTA_DATA      ,
      MM.CREATED_BY           ,
      MM.SUBSIDIARY_ID        ,
      MM.OLD_DATE             ,
      MM.SCHEDULE_ID          ,
      MM.SCHEDULE_ALERT_SENT  ,
      (SELECT COM.COMMITTEE_NAME_AR FROM COMMITTEE COM  WHERE nvl(COM.DELETED,0)=0 AND COM.COMMITTEE_ID =MM.COMMITTEE_ID ) COMMITTEE_NAME_AR,
      (SELECT COM.COMMITTEE_NAME_EN FROM COMMITTEE COM  WHERE nvl(COM.DELETED,0)=0 AND COM.COMMITTEE_ID =MM.COMMITTEE_ID ) COMMITTEE_NAME_EN,
      (select count(*) from MEETING_MEMBERS memb where MEMB.MEETING_ID =MM.MEETING_ID and nvl(MEMB.DELETED,0)=0 )  Members_count,
      (select count(*) from MEETING_COMMENTS MC  where nvl(MC.DELETED,0)=0 AND   MC.MINUTES_ID in (SELECT MOM.MOM_ID FROM MEETING_MINUTES MOM WHERE MOM.MEETING_ID = MM.MEETING_ID AND NVL(MOM.DELETED,0)=0) )  comment_count ,
      (select count(*) from MEETING_COMMENTS MC  where nvl(MC.DELETED,0)=0 AND   NVL(MC.APPROVED,0)=1  AND MC.MINUTES_ID in (SELECT MOM.MOM_ID FROM MEETING_MINUTES MOM WHERE MOM.MEETING_ID = MM.MEETING_ID AND NVL(MOM.DELETED,0)=0) ) APPROVE,
      MM.active_sharing
      FROM
      MEETINGS MM
      WHERE
      MM.MEETING_ID IN (SELECT MEMB.MEETING_ID FROM MEETING_MEMBERS MEMB WHERE MEMB.EMPLOYEE_ID = :EMPLOYEE_ID and nvl(MEMB.DELETED,0)=0)
      AND NVL(MM.DELETED,0)=0
      AND MM.STATUS=1
      order by MM.MEETING_DATE DESC`,
      returns: [],
      bindings: [],
      qstring: "",
      requireCommit: false
},

oldMeetingsByEmpId: {
  statement :`SELECT
  MM.MEETING_ID           ,
  MM.MEETING_CODE         ,
  MM.MEETING_DESCRIPTION  ,
  MM.MEETING_DATE         ,
  MM.START_TIME           ,
  MM.END_TIME             ,
  MM.LOCATION             ,
  MM.PROJECT_ID           ,
  MM.STATUS               ,
  MM.START_TIME_STR       ,
  MM.END_TIME_STR         ,
  MM.TYPE                 ,
  MM.COMMITTEE_ID         ,
  MM.DELETED              ,
  MM.DELETED_BY           ,
  MM.DELETED_DATE         ,
  MM.MEETING_HELD_FLAG    ,
  MM.SEND_MOM_FLAG        ,
  MM.SAVE_DELTA_DATA      ,
  MM.CREATED_BY           ,
  MM.SUBSIDIARY_ID        ,
  MM.OLD_DATE             ,
  MM.SCHEDULE_ID          ,
  MM.SCHEDULE_ALERT_SENT  ,
  (SELECT COM.COMMITTEE_NAME_AR FROM COMMITTEE COM  WHERE nvl(COM.DELETED,0)=0 AND COM.COMMITTEE_ID =MM.COMMITTEE_ID ) COMMITTEE_NAME_AR,
  (SELECT COM.COMMITTEE_NAME_EN FROM COMMITTEE COM  WHERE nvl(COM.DELETED,0)=0 AND COM.COMMITTEE_ID =MM.COMMITTEE_ID ) COMMITTEE_NAME_EN,
  (select count(*) from MEETING_MEMBERS memb where MEMB.MEETING_ID =MM.MEETING_ID and nvl(MEMB.DELETED,0)=0 )  Members_count,
  (select count(*) from MEETING_COMMENTS MC  where nvl(MC.DELETED,0)=0 AND   MC.MINUTES_ID in (SELECT MOM.MOM_ID FROM MEETING_MINUTES MOM WHERE MOM.MEETING_ID = MM.MEETING_ID AND NVL(MOM.DELETED,0)=0) )  comment_count ,
  (select count(*) from MEETING_COMMENTS MC  where nvl(MC.DELETED,0)=0 AND   NVL(MC.APPROVED,0)=1  AND MC.MINUTES_ID in (SELECT MOM.MOM_ID FROM MEETING_MINUTES MOM WHERE MOM.MEETING_ID = MM.MEETING_ID AND NVL(MOM.DELETED,0)=0) ) APPROVE
  FROM
  MEETINGS MM
  WHERE
  MM.MEETING_ID IN (SELECT MEMB.MEETING_ID FROM MEETING_MEMBERS MEMB WHERE MEMB.EMPLOYEE_ID = :EMPLOYEE_ID and nvl(MEMB.DELETED,0)=0)
  AND NVL(MM.DELETED,0)=0
  AND MM.STATUS=4
    `,
  returns: [],
  bindings: [],
  qstring: "",
  requireCommit: false
} ,

activeMeetingsMembersByCommitteeId: {
  statement :`SELECT
  MEM.EMPLOYEE_ID,
    (SELECT MEET.COMMITTEE_ID FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) as COMMITTEE_ID ,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,1) EMPLOYEE_NAME_AR,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,2) EMPLOYEE_NAME_EN,
  MEM.MEETING_ID,
  (SELECT MEET.MEETING_DESCRIPTION FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DESC,
  (SELECT MEET.MEETING_DATE FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DATE,
  (SELECT MEET.START_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) START_TIME_STR,
  (SELECT MEET.END_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) END_TIME_STR
  FROM MEETING_MEMBERS MEM
  WHERE
  NVL(MEM.DELETED,0) =0
  AND MEM.STATUS=1
  AND MEM.MEETING_ID IN (SELECT MEET.MEETING_ID FROM MEETINGS MEET WHERE COMMITTEE_ID = :COMMITTEE_ID and MEET.STATUS=1 )
  order by MEETING_DATE DESC`,
  returns: [],
  bindings: [],
  qstring: "",
  requireCommit: false
},

closedMeetingsMembersByCommitteeId: {
  statement :`SELECT
  MEM.EMPLOYEE_ID,
  (SELECT MEET.COMMITTEE_ID FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) as COMMITTEE_ID ,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,1) EMPLOYEE_NAME_AR,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,2) EMPLOYEE_NAME_EN,
  MEM.MEETING_ID,
  (SELECT MEET.MEETING_DESCRIPTION FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DESC,
  (SELECT MEET.MEETING_DATE FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DATE,
  (SELECT MEET.START_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) START_TIME_STR,
  (SELECT MEET.END_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) END_TIME_STR
  FROM MEETING_MEMBERS MEM
  WHERE
  NVL(MEM.DELETED,0) =0
  AND MEM.STATUS=1
  AND MEM.MEETING_ID IN (SELECT MEET.MEETING_ID FROM MEETINGS MEET WHERE MEET.COMMITTEE_ID = :COMMITTEE_ID and MEET.STATUS=4)
    `,
  returns: [],
  bindings: [],
  qstring: "",
  requireCommit: false
},

finishedMeetingsMembersByCommitteeId: {
  statement :`SELECT
  MEM.EMPLOYEE_ID,
  (SELECT MEET.COMMITTEE_ID FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) as COMMITTEE_ID ,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,1) EMPLOYEE_NAME_AR,
  GETEMPNAME_LANG(MEM.EMPLOYEE_ID,1,2) EMPLOYEE_NAME_EN,
  MEM.MEETING_ID,
  (SELECT MEET.MEETING_DATE FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DATE,
  (SELECT MEET.START_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) START_TIME_STR,
  (SELECT MEET.END_TIME_STR FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) END_TIME_STR,
  (SELECT MEET.MEETING_DESCRIPTION FROM MEETINGS MEET WHERE MEET.MEETING_ID=MEM.MEETING_ID ) MEETING_DESC
  FROM MEETING_MEMBERS MEM
  WHERE
  NVL(MEM.DELETED,0) =0
  AND MEM.STATUS=1
  AND MEM.MEETING_ID IN (SELECT MEET.MEETING_ID FROM MEETINGS MEET WHERE MEET.COMMITTEE_ID = :COMMITTEE_ID and MEET.STATUS=2)
    `,
  returns: [],
  bindings: [],
  qstring: "",
  requireCommit: false
}


}
  module.exports = statements ;
  